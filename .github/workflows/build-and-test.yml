name: Build and Test

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - 'main'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cpp-linter/cpp-linter-action@v2
        id: cpplinter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: 'file'
          tidy-checks: ''
          thread-comments: ${{ github.event_name == 'pull_request' && 'update' }}
      - name: Check Lint Results
        if: steps.cpplinter.outputs.checks-failed > 0
        run: exit 1

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential liblz4-dev libzstd-dev protobuf-compiler doxygen graphviz
      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug
      - name: Build
        run: cmake --build ${{github.workspace}}/build -j3
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{github.workspace}}/build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{github.workspace}}/build
      - name: Run Tests
        working-directory: ${{github.workspace}}/build
        run: ctest --output-on-failure

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install gcovr
        run: sudo apt-get install -y gcovr
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{github.workspace}}/build
      - name: Generate Coverage Report
        run: gcovr -r . ${{github.workspace}}/build

      # TODO add coverage report upload so contributors are encouraged to add tests during a PR
      # TODO enforcing documentation
      # TODO use cache and split workflow into multiple jobs
